# 0A) Setting working directory
# Copy this line for Marc's computer: setwd("C:/Users/MarcGarciaLopezPhota/Photanol bv/Photanol all - students - General/2_Upscaling/2021 Alessia de Maio/5_Operational_envelope/First run (raw samples)/Models/")
# Copy this line for Alessia's: setwd("C:/Users/Alessia/Photanol bv/Photanol students - General/2_Upscaling/2021 Alessia de Maio/5_Operational_envelope/First run (raw samples)/Models/")
setwd("C:/Users/MarcGarciaLopezPhota/Photanol bv/Photanol all - students - General/2_Upscaling/2021 Alessia de Maio/5_Operational_envelope/First run (raw samples)/Models/")
# 0B) Loading packages
library(tidyverse)
library(caTools)
library(caret)
library(randomForest)
# 1) Importing the data + data wrangling
data <- read.csv(file = 'data/data.csv',
row.names = 1)
data$class <- as.factor(ifelse(test = data$qvcd < 0.1, yes = 'safe', no = 'not safe'))  # Class = 0 (not safe); Class = 1 (safe)
data <- data[ , -4]
data <- na.omit(data)
total_set <- data
3.1) Package caret
# 3.1.1) Building the model + evaluating performance
# 5-fold validation + 5 repeats (no external testing set)
train_control <- trainControl(method = "repeatedcv",
number = 5,
repeats = 5)
rf_grid <- expand.grid(mtry = seq(from = 1,
to = 3,
by = 1),
coefReg = seq(from = 0,
to = 1,
by = 0.25),
coefImp = seq(from = 0,
to = 1,
by = 0.25))
classifier_1 <- train(class ~ .,
data = total_set,
trControl = train_control,
method = "RRF",
tuneGrid = rf_grid)
classifier_1
# 3.2) Package randomForest + homemade functions
# 3.2.1) Finding the best hyperparameters for the RF model (Grid search)
# Check: http://topepo.github.io/caret/train-models-by-tag.html#random-forest
# Options for randomForest package:
# * 'parRF' (mtry)
# * 'rf' (mtry)
# * 'rfRules' (mtry, maxdepth)
# * 'RRF' (mtry, coefReg, coefImp)
classifier_2 <- train(form = class ~ .,
data = total_set,
method = 'RRF')
classifier_2
classifier_2$bestTune
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 3.2.2) Building the model + evaluating performance
# 5-fold validation (no external testing set) -> accuracy 100%
folds <- createFolds(y = total_set$class,
k = 5)
cv <- lapply(folds, function(x){
training_fold <- total_set[-x, ]
testing_fold <- total_set[x, ]
classifier <- randomForest(x = total_set[ , -4],
y = total_set$class,
ntree = 100,
mtry = 2,
coefReg = 0,
coefImp = 0.5)
y_pred <- predict(object = classifier,
newdata = testing_fold[ , -4])
cm <- table(testing_fold[ , 4],
y_pred)
accuracy = (cm[1, 1] + cm[2, 2])/(cm[1, 1] + cm[1, 2] + cm[2, 1] + cm[2, 2])
sensitivity = (cm[2, 2])/(cm[2, 1] + cm[2,2])
specificity = (cm[1, 1])/(cm[1, 1] + cm[1,2])
result = data.frame(accuracy, sensitivity, specificity)
return(result)
})
apply(X = do.call(rbind, cv),
MARGIN = 2,
FUN = mean)
apply(X = do.call(rbind, cv),
MARGIN = 2,
FUN = sd)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 4) Final model
classifier_f <- randomForest(x = total_set[ , -4],
y = total_set$class,
ntree = 100,
mtry = 2,
coefReg = 0,
coefImp = 0.5)
# 5.1.2) Defining ranges:
pH <- seq(from = 9.5,
to = 11,
by = 0.5)
temp <- seq(from = 38,
to = 40,
by = 1)
osm <- seq(from = 0,
to = 0.3,
by = 0.3)
prediction_data_1 <- as.data.frame(crossing(pH, temp, osm))
predictions_1 <- predict(object = classifier_f,
newdata = prediction_data_1,
type = "class")
prediction_data_1$class_2 <- predictions_1
prediction_data_1$class <- ifelse(test = prediction_data_1$class_2 == 'safe',
yes = 1,
no = 0)
prediction_data_1 <- prediction_data_1 %>%
select(pH, temp, osm, class, class_2)
View(prediction_data_1)
write.csv(x = prediction_data_1,
file = 'Classification (safe-not safe)/Random Forest/prediction_data_theo.csv')
# 5.1.2) Defining ranges:
pH <- seq(from = 9.5,
to = 11,
by = 0.5)
temp <- seq(from = 38,
to = 40,
by = 1)
osm <- seq(from = 0,
to = 0.3,
by = 0.3)
prediction_data_1 <- as.data.frame(crossing(pH, temp, osm))
predictions_1 <- predict(object = classifier_f,
newdata = prediction_data_1,
type = "class")
prediction_data_1$class_2 <- predictions_1
prediction_data_1$class <- ifelse(test = prediction_data_1$class_2 == 'safe',
yes = 1,
no = 0)
prediction_data_1 <- prediction_data_1 %>%
select(pH, temp, osm, class, class_2)
View(prediction_data_1)
write.csv(x = prediction_data_1,
file = 'Classification (safe-not safe)/Random Forest/prediction_data_theo.csv')
