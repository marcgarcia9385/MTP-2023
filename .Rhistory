setwd('C:/Users/marcg/OneDrive/Escritorio/MTP-2023')
packages <- c('tidyverse',
'magrittr',
'DataExplorer',
'funModeling',
'GGally',
'plotly',
'nortest',
'qqplotr')
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Loading packages
invisible(lapply(X = packages,
FUN = library,
character.only = TRUE))
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 1) Loading the data
data <- read.table('data/data.csv',
header = TRUE,
sep = ',',
row.names = NULL) %>%
select(pH, temp, osm, qvcd)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 2) Initial exploration
introduce(data)
plot_intro(data) +
theme_bw() +
theme(axis.title.y = element_text(vjust = +3),
axis.title.x = element_text(vjust = -0.75))
data_2 <- data
names <- c(1:3)
data_2[ , names] <- lapply(data_2[ , names] , factor)
plot_bar(data = data_2[ , 1:3],
ggtheme = theme_bw(),
title = 'Distribution of the predictors') +
theme(axis.title.y = element_text(vjust = +3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of avg '*beta)) +
labs(x = expression('avg '*beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of avg '*beta)) +
labs(x = expression('avg '*beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(mapping = aes(sample = data$qvcd)) +
stat_qq_point(size = 2) +
stat_qq_line() +
theme_bw() +
ggtitle(label = expression('Q-Q plot of  '*beta)) +
labs(x = 'Theoretical quantiles',
y = 'Sample quantiles') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of'*beta)) +
labs(x = expression(beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of '*beta)) +
labs(x = expression(beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
# Support Vector Machines (SVM)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 0A) Setting working directory
setwd('C:/Users/marcg/OneDrive/Escritorio/MTP-2023')
# 0B) Installing & loading packages from CRAN
# Package names
packages <- c('tidyverse',
'writexl',
'vctrs',
'rlang',
'devtools',
'caTools',
'caret',
'e1071',
'kernlab',
'ROSE',
'imbalance',
'themis',
'recipes',
'plotly',
'viridis')
# Install packages not yet installed
installed_packages <- packages %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Loading packages
invisible(lapply(X = packages,
FUN = library,
character.only = TRUE))
# 0C) Installing and loading packages that are not available in CRAN (Github)
install_github('https://github.com/cran/DMwR',
force = T)
library(DMwR)
# 1) Data preparation
# 1.1) Loading the data
data <- read.csv(file = 'data/data.csv',
row.names = 1)
# 1.2) Creating the Class variable by fixing a threshold for the Qvcd
# NOTE: the positive class needs to go first
data$Class <- factor(x = ifelse(test = data$qvcd < 0.1,
yes = 'safe',
no = 'not.safe'),
levels = c('safe', 'not.safe'))
# 1.3) Removing the missing values and the Qvcd from the dataset
data$Class <- factor(x = ifelse(test = data$qvcd < 0.1,
yes = 'safe',
no = 'not.safe'),
levels = c('safe', 'not.safe'))
data <- data[ , -4]
data <- na.omit(data)
total_set <- data
preproc_1 <- preProcess(total_set,
method = c('range'))
total_set <- predict(object = preproc_1,
newdata = total_set)
set.seed(12345)
system.time(classifier_f <- svm(formula = Class ~ .,
data = total_set,
type = 'C-classification',
kernel = 'linear',
cost = 2.25,
weights = 3.5))
pH <- seq(from = 9,
to = 10,
length.out = 11)
temp <- seq(from = 40,
to = 45,
length.out = 11)
osm <- 0.3
prediction_data_2 <- as.data.frame(crossing(pH, temp, osm))
# Scaling the data
preproc_3 <- preProcess(prediction_data_2,
method = c('range'))
prediction_data_2_s <- predict(object = preproc_3,
newdata = prediction_data_2)
# Making the predictions
predictions_2 <- predict(object = classifier_f,
newdata = prediction_data_2_s,
type = 'class')
prediction_data_2$Class <- as.factor(predictions_2)
prediction_data_2$Class.2 <- factor(x = prediction_data_2$Class,
levels = c('not.safe', 'safe'),
labels = c(0, 1))
View(prediction_data_2)
pH <- seq(from = 9,
to = 10,
length.out = 11)
temp <- seq(from = 40,
to = 45,
length.out = 11)
osm <- 0.3
prediction_data_2 <- as.data.frame(crossing(pH, temp, osm))
# Scaling the data
preproc_3 <- preProcess(prediction_data_2,
method = c('range'))
prediction_data_2_s <- predict(object = preproc_3,
newdata = prediction_data_2)
pH <- seq(from = 9,
to = 10,
length.out = 11)
temp <- seq(from = 40,
to = 45,
length.out = 11)
osm <- seq(from = 0.3,
to = 0.6,
length.out = 11)
prediction_data_2 <- as.data.frame(crossing(pH, temp, osm))
# Scaling the data
preproc_3 <- preProcess(prediction_data_2,
method = c('range'))
prediction_data_2_s <- predict(object = preproc_3,
newdata = prediction_data_2)
# Making the predictions
predictions_2 <- predict(object = classifier_f,
newdata = prediction_data_2_s,
type = 'class')
prediction_data_2$Class <- as.factor(predictions_2)
prediction_data_2$Class.2 <- factor(x = prediction_data_2$Class,
levels = c('not.safe', 'safe'),
labels = c(0, 1))
View(prediction_data_2)
# Support Vector Machines (SVM)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 0A) Setting working directory
setwd('C:/Users/marcg/OneDrive/Escritorio/MTP-2023')
# 0B) Installing & loading packages from CRAN
# Package names
packages <- c('tidyverse',
'writexl',
'vctrs',
'rlang',
'devtools',
'caTools',
'caret',
'e1071',
'kernlab',
'ROSE',
'imbalance',
'themis',
'recipes',
'plotly',
'viridis')
# Install packages not yet installed
installed_packages <- packages %in%
rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Loading packages
invisible(lapply(X = packages,
FUN = library,
character.only = TRUE))
# 0C) Installing and loading packages that are not available in CRAN (Github)
install_github('https://github.com/cran/DMwR',
force = T)
library(DMwR)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 1) Data preparation
# 1.1) Loading the data
data <- read.csv(file = 'data/data.csv',
row.names = 1)
# 1.2) Creating the Class variable by fixing a threshold for the Qvcd
# NOTE: the positive class needs to go first
data$Class <- factor(x = ifelse(test = data$qvcd < 0.1,
yes = 'safe',
no = 'not.safe'),
levels = c('safe', 'not.safe'))
# 1.3) Removing the missing values and the Qvcd from the dataset
data$Class <- factor(x = ifelse(test = data$qvcd < 0.1,
yes = 'safe',
no = 'not.safe'),
levels = c('safe', 'not.safe'))
data <- data[ , -4]
data <- na.omit(data)
total_set <- data
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 2) Scaling/normalization
preproc_1 <- preProcess(total_set,
method = c('range'))
total_set <- predict(object = preproc_1,
newdata = total_set)
set.seed(12345)
system.time(classifier_f <- svm(formula = Class ~ .,
data = total_set,
type = 'C-classification',
kernel = 'linear',
cost = 2.25,
weights = 3.5))
prediction_data_1 <- tribble(
~cond,  ~pH,  ~temp,  ~osm,
1,    9,     55,   0.3,
2,  11.5,    30,   1.0,
3,   9.5,    38,   1.0,
4,  9.75,    47,   0.3,
5,    11,    35,   0.4,
6,  10.2,    46,   0.3,
7,     9,    30,   0.3,
8,     9,    45,   0.3,
9,   9.5,    45,   0.3,
10,    10,    45,   0.3,
11,     9,    42,   0.6
)
prediction_data_1 <- prediction_data_1 %>%
slice(rep(1:n(), each = 100000))
preproc_2 <- preProcess(prediction_data_1,
method = c('range'))
prediction_data_1_s <- predict(object = preproc_2,
newdata = prediction_data_1)
system.time(predictions_1 <- predict(object = classifier_f,
newdata = prediction_data_1_s,
type = 'class'))
prediction_data_1$Class <- predictions_1
prediction_data_1b <- prediction_data_1 %>%
group_by(cond) %>%
count(Class) %>%
mutate(prop = prop.table(n))
View(prediction_data_1b)
prediction_data_1 <- tribble(
~cond,  ~pH,  ~temp,  ~osm,
1,    9,     55,   0.3,
2,  11.5,    30,   1.0,
3,   9.5,    38,   1.0,
4,  9.75,    47,   0.3,
5,    11,    35,   0.4,
6,  10.2,    46,   0.3,
7,     9,    30,   0.3,
8,     9,    45,   0.3,
9,   9.5,    45,   0.3,
10,    10,    45,   0.3,
11,     9,    42,   0.6
)
prediction_data_1 <- prediction_data_1 %>%
slice(rep(1:n(), each = 100000))
preproc_2 <- preProcess(prediction_data_1,
method = c('range'))
prediction_data_1_s <- predict(object = preproc_2,
newdata = prediction_data_1)
system.time(predictions_1 <- predict(object = classifier_f,
newdata = prediction_data_1_s,
type = 'class'))
prediction_data_1$Class <- predictions_1
View(prediction_data_1)
pH <- seq(from = 9,
to = 11.5,
length.out = 75)
temp <- seq(from = 30,
to = 55,
length.out = 75)
osm <- seq(from = 0.3,
to = 1.4,
length.out = 75)
# Crossing all the possible combinations
prediction_data_2 <- as.data.frame(crossing(pH, temp, osm))
# Scaling the data
preproc_3 <- preProcess(prediction_data_2,
method = c('range'))
prediction_data_2_s <- predict(object = preproc_3,
newdata = prediction_data_2)
# Making the predictions
predictions_2 <- predict(object = classifier_f,
newdata = prediction_data_2_s,
type = 'class')
prediction_data_2$Class <- as.factor(predictions_2)
prediction_data_2$Class.2 <- factor(x = prediction_data_2$Class,
levels = c('not.safe', 'safe'),
labels = c(0, 1))
# Filtering the safe conditions
prediction_data_2_safe <- prediction_data_2 %>%
filter(Class == 'safe')
View(prediction_data_2)
aa <- filter(prediction_data_2, osm == 0.3, pH <= 9.8)
View(aa)
aa <- filter(prediction_data_2, osm == 0.3, pH <= 9.8, Class == 'safe')
View(aa)
aa <- filter(prediction_data_2, osm == 0.3, pH > 10, Class == 'safe')
Viwe(aa)
