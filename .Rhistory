verbose = F))
set.seed(1234)
train_control_2a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_2a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_2a,
method = 'nb',
verbose = F))
set.seed(1234)
train_control_2b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_2b <- train(form = Class ~ .,
data = total_set,
trControl = train_control_2b,
method = 'nb',
verbose = F))
grid <- as.data.frame(expand.grid(fL = seq(from = 0,
to = 1,
by = 0.1),
usekernel = T,
adjust = seq(from = 0,
to = 1,
by = 0.1)))
set.seed(1234)
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = grid,
verbose = F))
(classifier_4c <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = data.frame(fL = 0.5,
adjust = 0.7,
usekernel = TRUE),
verbose = F))
set.seed(1234)
train_control_4b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_4c <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = data.frame(fL = 0.5,
adjust = 0.7,
usekernel = TRUE),
verbose = F))
set.seed(1234)
train_control_4b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_4b <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = grid,
verbose = F))
View(classifier_4b$results)
grid_2 <- as.data.frame(expand.grid(fL = seq(from = 0.5,
to = 0.6,
length.out = 2),
usekernel = T,
adjust = seq(from = 0.6,
to = 0.7,
length.out = 2)))
grid_1 <- as.data.frame(expand.grid(fL = seq(from = 0,
to = 1,
by = 0.1),
usekernel = T,
adjust = seq(from = 0,
to = 1,
by = 0.1)))
set.seed(1234)
train_control_4b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_4c <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = grid_2,
verbose = F))
classifier_4c$results
classifier_4c$resample
set.seed(1234)
train_control_4b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_4b <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = grid,
verbose = F))
set.seed(1234)
(classifier_4c <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = data.frame(fL = 0.5,
adjust = 0.7,
usekernel = TRUE),
verbose = F))
acc <- classifier_4a$resample$Accuracy
kappa <- classifier_4a$resample$Kappa
sens <- classifier_4c$resample$Sens
spec <- classifier_4c$resample$Spec
ROC <- classifier_4c$resample$ROC
mean(sens)
mean(spec)
mean(ROC)
set.seed(1234)
train_control_4b <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up',
classProbs = T,
summaryFunction = twoClassSummary)
(classifier_4b <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4b,
method = 'nb',
tuneGrid = grid,
verbose = F))
classifier_4a$pred
classifier_4a$results
classifier_4a$resampledCM
classifier_4a$resample
class(classifier_4a$resample)
classifier_4a$resample
classifier_4a$ptype
classifier_4b$bestTune
classifier_4b$modelInfo
classifier_4b$pred
classifier_4b$call
classifier_4b$trainingData
classifier_4b$resample
set.seed(1234)
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = data.frame(usekernel = T,
fL = 0.5,
adjust = 0.7),
verbose = F))
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = data.frame(usekernel = T,
fL = 0.5,
adjust = 0.7),
verbose = F))
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = data.frame(usekernel = T,
fL = 0.5,
adjust = 0.7),
verbose = F))
set.seed(1234)
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = data.frame(usekernel = T,
fL = 0.5,
adjust = 0.7),
verbose = F))
set.seed(1234)
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = data.frame(usekernel = T,
fL = 0.5,
adjust = 0.7),
verbose = F))
grid <- as.data.frame(expand.grid(fL = seq(from = 0,
to = 1,
by = 0.1),
usekernel = T,
adjust = seq(from = 0,
to = 1,
by = 0.1)))
set.seed(12345)
train_control_4a <- trainControl(method = 'repeatedcv',
number = 5,
repeats = 10,
savePredictions = 'final',
sampling = 'up')
(classifier_4a <- train(form = Class ~ .,
data = total_set,
trControl = train_control_4a,
method = 'nb',
tuneGrid = grid,
verbose = F))
classifier_4a$results
classifier_4a$bestTune
classifier_4a$bestTune
205/8
# Exploratory Data Analysis (EDA)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 0A) Setting working directory
setwd('C:/Users/marcg/OneDrive/Escritorio/MTP-2023')
# 0B) Installing & loading packages from CRAN
# Package names
packages <- c('tidyverse',
'magrittr',
'DataExplorer',
'funModeling',
'GGally',
'plotly',
'nortest',
'qqplotr')
# Install packages not yet installed
installed_packages <- packages %in% rownames(installed.packages())
if (any(installed_packages == FALSE)) {
install.packages(packages[!installed_packages])
}
# Loading packages
invisible(lapply(X = packages,
FUN = library,
character.only = TRUE))
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 1) Loading the data
data <- read.table('data/data.csv',
header = TRUE,
sep = ',',
row.names = NULL) %>%
select(pH, temp, osm, qvcd)
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
# 2) Initial exploration
introduce(data)
plot_intro(data) +
theme_bw() +
theme(axis.title.y = element_text(vjust = +3),
axis.title.x = element_text(vjust = -0.75))
data_2 <- data
names <- c(1:3)
data_2[ , names] <- lapply(data_2[ , names] , factor)
plot_bar(data = data_2[ , 1:3],
ggtheme = theme_bw(),
title = 'Distribution of the predictors') +
theme(axis.title.y = element_text(vjust = +3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = expression(beta~"[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(mapping = aes(sample = data$qvcd)) +
stat_qq_point(size = 2) +
stat_qq_line() +
theme_bw() +
ggtitle(label = expression('Q-Q plot of '*beta)) +
labs(x = 'Theoretical quantiles',
y = 'Sample quantiles') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = expression(beta~"[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of average 'beta~)) +
labs(x = expression('avg 'beta~"[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = expression(beta~"[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = expression("avg"beta~"[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = paste0('average ', expression(beta~"[mM lactate/day]")),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = paste0('average ', expression(beta), "[mM lactate/day]"),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = 'Distribution of the response') +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(beta))) +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(beta~))) +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(beta~))) +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(~beta))) +
labs(x = paste0('avg ', expression(~beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(mapping = aes(sample = data$qvcd)) +
stat_qq_point(size = 2) +
stat_qq_line() +
theme_bw() +
ggtitle(label = expression('Q-Q plot of '*beta)) +
labs(x = 'Theoretical quantiles',
y = 'Sample quantiles') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
ggplot(data = data, mapping = aes(x = qvcd)) +
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(beta))) +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = paste0('Distribution of average ', expression(beta))) +
labs(x = paste0('avg ', expression(beta), ' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of avg '*beta)) +
labs(x = expression('avg '*beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_density(fill = 'firebrick', size = 0.5) +
theme_bw() +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of avg '*beta)) +
labs(x = expression('avg '*beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(mapping = aes(sample = data$qvcd)) +
stat_qq_point(size = 2) +
stat_qq_line() +
theme_bw() +
ggtitle(label = expression('Q-Q plot of avg '*beta)) +
labs(x = 'Theoretical quantiles',
y = 'Sample quantiles') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(data = data, mapping = aes(x = qvcd)) +
geom_histogram(binwidth = 1, color = 'black', size = 0.5) +
theme_bw() +
ylim(c(0, 25)) +
scale_x_continuous(breaks = round(seq(min(data$qvcd), max(data$qvcd), by = 5), 1)) +
ggtitle(label = expression('Distribution of avg '*beta)) +
labs(x = expression('avg '*beta*' [mM lactate/day]'),
y = 'count') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
ggplot(mapping = aes(sample = data$qvcd)) +
stat_qq_point(size = 2) +
stat_qq_line() +
theme_bw() +
ggtitle(label = expression('Q-Q plot of avg '*beta)) +
labs(x = 'Theoretical quantiles',
y = 'Sample quantiles') +
theme(axis.title.y = element_text(vjust = + 3),
axis.title.x = element_text(vjust = -0.75))
